
token
web3.sha3("withdraw(address,uint256)").substring(0,10)
eth.getTransactionReceipt("0xd6cd3bf07be432378122386576eb21e4925764a618d3d6c177af5b7c90aa425c")
eth.getTransactionReceipt("0x822e015183fb6562c1b9139056bb85dce7fc02539e4fdb8bf670e472259aca1b")
eth.getTransactionReceipt("0x89c713e10872d81a7c6ea91f5efd4aea6c39b58ce21b07b1c192b7290bfebb99")
web3.sha3("totalSupply()").substring(0,10)
web3.sha3("decimals()").substring(0,10)
web3.sha3("transferFrom(address,address,uint256)").substring(0,10)
new BigNumber("5479",16)
new BigNumber("5614",16)
web3.sha3("totalSupply(address)").substring(0,10)
web3.sha3("transfer(address,uint256)").substring(0,10)
eth.getTransactionReceipt("0x19145c79a071b2851c5ccdcdec02446896cc066acf11cbf00721fd907ca4d47f")
debug.traceTransaction
debug.traceTransaction()
eth.pendingTransactions
eth.pendingTransactions.length
var tokenTraderABI=[{"constant":false,"inputs":[{"name":"ethers","type":"uint256"}],"name":"makerWithdrawEther","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"toTokenTrader","type":"address"},{"name":"tokens","type":"uint256"}],"name":"makerMoveAsset","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"asset","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sellPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sellsTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"toTokenTrader","type":"address"},{"name":"ethers","type":"uint256"}],"name":"makerMoveEther","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"buyPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"makerDepositEther","outputs":[],"payable":true,"type":"function"},{"constant":true,"inputs":[],"name":"units","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_buysTokens","type":"bool"},{"name":"_sellsTokens","type":"bool"}],"name":"activate","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"buysTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"tokenAddress","type":"address"},{"name":"tokens","type":"uint256"}],"name":"makerWithdrawERC20Token","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"takerBuyAsset","outputs":[],"payable":true,"type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"uint256"}],"name":"makerWithdrawAsset","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"etherValueOfTokensToSell","type":"uint256"}],"name":"takerSellAsset","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"_asset","type":"address"},{"name":"_buyPrice","type":"uint256"},{"name":"_sellPrice","type":"uint256"},{"name":"_units","type":"uint256"},{"name":"_buysTokens","type":"bool"},{"name":"_sellsTokens","type":"bool"}],"type":"constructor"},{"payable":true,"type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"buys","type":"bool"},{"indexed":false,"name":"sells","type":"bool"}],"name":"ActivatedEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"MakerDepositedEther","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"tokens","type":"uint256"}],"name":"MakerWithdrewAsset","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"tokenAddress","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"MakerWithdrewERC20Token","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"ethers","type":"uint256"}],"name":"MakerWithdrewEther","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"buyer","type":"address"},{"indexed":false,"name":"ethersSent","type":"uint256"},{"indexed":false,"name":"ethersReturned","type":"uint256"},{"indexed":false,"name":"tokensBought","type":"uint256"}],"name":"TakerBoughtAsset","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"seller","type":"address"},{"indexed":false,"name":"etherValueOfTokensToSell","type":"uint256"},{"indexed":false,"name":"tokensSold","type":"uint256"},{"indexed":false,"name":"etherValueOfTokensSold","type":"uint256"}],"name":"TakerSoldAsset","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"}],"name":"OwnershipTransferred","type":"event"}]
tokenTraderABI
var tokenTrader = web3.eth.contract(tokenTraderABI).at("0xfb6ae08258f553335fd33b71081228e53794f8eb")
tokenTrader
var tokenTraderAPI = [{"constant":false,"inputs":[{"name":"ethers","type":"uint256"}],"name":"makerWithdrawEther","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"toTokenTrader","type":"address"},{"name":"tokens","type":"uint256"}],"name":"makerMoveAsset","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"asset","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sellPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sellsTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"toTokenTrader","type":"address"},{"name":"ethers","type":"uint256"}],"name":"makerMoveEther","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"buyPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"makerDepositEther","outputs":[],"payable":true,"type":"function"},{"constant":true,"inputs":[],"name":"units","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_buysTokens","type":"bool"},{"name":"_sellsTokens","type":"bool"}],"name":"activate","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"buysTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"tokenAddress","type":"address"},{"name":"tokens","type":"uint256"}],"name":"makerWithdrawERC20Token","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"takerBuyAsset","outputs":[],"payable":true,"type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"uint256"}],"name":"makerWithdrawAsset","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"etherValueOfTokensToSell","type":"uint256"}],"name":"takerSellAsset","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"_asset","type":"address"},{"name":"_buyPrice","type":"uint256"},{"name":"_sellPrice","type":"uint256"},{"name":"_units","type":"uint256"},{"name":"_buysTokens","type":"bool"},{"name":"_sellsTokens","type":"bool"}],"type":"constructor"},{"payable":true,"type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"buys","type":"bool"},{"indexed":false,"name":"sells","type":"bool"}],"name":"ActivatedEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"MakerDepositedEther","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"tokens","type":"uint256"}],"name":"MakerWithdrewAsset","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"tokenAddress","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"MakerWithdrewERC20Token","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"ethers","type":"uint256"}],"name":"MakerWithdrewEther","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"buyer","type":"address"},{"indexed":false,"name":"ethersSent","type":"uint256"},{"indexed":false,"name":"ethersReturned","type":"uint256"},{"indexed":false,"name":"tokensBought","type":"uint256"}],"name":"TakerBoughtAsset","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"seller","type":"address"},{"indexed":false,"name":"etherValueOfTokensToSell","type":"uint256"},{"indexed":false,"name":"tokensSold","type":"uint256"},{"indexed":false,"name":"etherValueOfTokensSold","type":"uint256"}],"name":"TakerSoldAsset","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"}],"name":"OwnershipTransferred","type":"event"}];
eth.getTransactionReceipt("0xcbc95426d0fdd069a7dfa88c90b547a6d961432323f40aa9d4358e7bc3a1250b")
eth.getTransactionReceipt("0xf64d1a82b649ccd639d266022fc6ad0d36a15f75e2fa8068fa7430a482e76ef3")
web3.sha3("ActivatedEvent(bool,bool)")
web3.sha3("MakerTransferredAsset(address,uint256)")
web3.sha3("MakerTransferredEther(address,uint256)")
eth.pendingTransactions.length
eth.accounts
eth.getCompilers()
var greeterSource = 'contract mortal { address owner; function mortal() { owner = msg.sender; } function kill() { if (msg.sender == owner) suicide(owner); } } contract greeter is mortal { string greeting; function greeter(string _greeting) public { greeting = _greeting; } function greet() constant returns (string) { return greeting; } }'
var greeterCompiled = web3.eth.compile.solidity(greeterSource)
var _greeting = "Hello World!"
var greeterContract = web3.eth.contract(greeterCompiled.greeter.info.abiDefinition);
greeterCompiled.greeter
greeterCompiled
greeterCompiled.<stdin>:greeter.info
greeterCompiled.\<stdin\>:greeter.info
greeterCompiled.<stdin>:greeter.
greeterCompiled.
greeterCompiled
greeterCompiled.stdin.
var greeterCompiled = web3.eth.compile.solidity(file:test:greeterSource)
web3.eth.compile.solidity
web3.eth.compile.solidity(
)
var greeterSource = 'contract mortal { address owner; function mortal() { owner = msg.sender; } function kill() { if (msg.sender == owner) suicide(owner); } } contract greeter is mortal { string greeting; function greeter(string _greeting) public { greeting = _greeting; } function greet() constant returns (string) { return greeting; } }'
var greeterCompiled = web3.eth.compile.solidity(greeterSource)
greeterCompiled
greeterCompiled."<stdin>".greeter
greeterCompiled.'<stdin>'.greeter
'greeterCompiled.<stdin>.greeter'
greeterCompiled./<stdin/>.greeter
greeterCompiled.\<stdin\>.greeter
greeterCompiled."<"stdin">".greeter
var greeterCompiled = web3.eth.compile.solidity(greeterSource, source="demo"))
var greeterCompiled = web3.eth.compile.solidity(greeterSource, source="demo")
var test:tst="123";
var untitled1:testContract = web3.eth.contract([{"constant":true,"inputs":[],"name":"currentState","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"testWager","outputs":[{"name":"","type":"bool"}],"payable":true,"type":"function"}]);
var untitled1:test = untitled1:testContract.new(
   {
     from: web3.eth.accounts[0], 
     data: '0x6060604052341561000c57fe5b5b61014c8061001c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c3f6acf146100465780634cad42d31461007a575bfe5b341561004e57fe5b61005661009c565b6040518082600281111561006657fe5b60ff16815260200191505060405180910390f35b6100826100af565b604051808215151515815260200191505060405180910390f35b600060009054906101000a900460ff1681565b600060006001600060009054906101000a900460ff1660028111156100d057fe5b8260028111156100dc57fe5b1415801561010f5750600060009054906101000a900460ff16600281111561010057fe5b81600281111561010c57fe5b14155b1561011957610000565b5b5b5050905600a165627a7a72305820406c634afa75371d0204002200b3b64f74cfd761e0c305eec30bca691b513b930029', 
     gas: '4700000'
   }, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })
greeterCompiled
greeterCompiled.get("<stdin>:greeter")
greeterCompiled.("<stdin>:greeter")
greeterCompiled("<stdin>:greeter")
greeterCompiled["<stdin>:greeter"]
greeterCompiled
greeterCompiled["<stdin>:greeter"]var _greeting = "Hello World!";
greeterCompiled
var _greeting = "Hello World!";
var greeterContract = web3.eth.contract(greeterCompiled["<stdin>:greeter"].info.abiDefinition);
var traderSource = "pragma solidity ^0.4.4;contract ERC20 { function totalSupply() constant returns (uint totalSupply); function balanceOf(address _owner) constant returns (uint balance); function transfer(address _to, uint _value) returns (bool success); function transferFrom(address _from, address _to, uint _value) returns (bool success); function approve(address _spender, uint _value) returns (bool success); function allowance(address _owner, address _spender) constant returns (uint remaining); event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value);}contract Owned { address public owner; event OwnershipTransferred(address indexed _from, address indexed _to); function Owned() { owner = msg.sender; } modifier onlyOwner { if (msg.sender != owner) throw; _; } modifier onlyOwnerOrTokenTraderWithSameOwner { if (msg.sender != owner && TokenTrader(msg.sender).owner() != owner) throw; _; } function transferOwnership(address newOwner) onlyOwner { OwnershipTransferred(owner, newOwner); owner = newOwner; }}contract TokenTrader is Owned { address public asset; uint256 public buyPrice; uint256 public sellPrice; uint256 public units; bool public buysTokens; bool public sellsTokens; event ActivatedEvent(bool buys, bool sells); event MakerDepositedEther(uint256 amount); event MakerWithdrewAsset(uint256 tokens); event MakerTransferredAsset(address toTokenTrader, uint256 tokens); event MakerWithdrewERC20Token(address tokenAddress, uint256 tokens); event MakerWithdrewEther(uint256 ethers); event MakerTransferredEther(address toTokenTrader, uint256 ethers); event TakerBoughtAsset(address indexed buyer, uint256 ethersSent, uint256 ethersReturned, uint256 tokensBought); event TakerSoldAsset(address indexed seller, uint256 etherValueOfTokensToSell, uint256 tokensSold, uint256 etherValueOfTokensSold); function TokenTrader ( address _asset, uint256 _buyPrice, uint256 _sellPrice, uint256 _units, bool _buysTokens, bool _sellsTokens ) internal { asset = _asset; buyPrice = _buyPrice; sellPrice = _sellPrice; units = _units; buysTokens = _buysTokens; sellsTokens = _sellsTokens; ActivatedEvent(buysTokens, sellsTokens); } function activate ( bool _buysTokens, bool _sellsTokens ) onlyOwner { buysTokens = _buysTokens; sellsTokens = _sellsTokens; ActivatedEvent(buysTokens, sellsTokens); } function makerDepositEther() payable onlyOwnerOrTokenTraderWithSameOwner { MakerDepositedEther(msg.value); } function makerWithdrawAsset(uint256 tokens) onlyOwner returns (bool ok) { MakerWithdrewAsset(tokens); return ERC20(asset).transfer(owner, tokens); } function makerTransferAsset( TokenTrader toTokenTrader, uint256 tokens ) onlyOwner returns (bool ok) { if (owner != toTokenTrader.owner() || asset != toTokenTrader.asset()) { throw; } MakerTransferredAsset(toTokenTrader, tokens); return ERC20(asset).transfer(toTokenTrader, tokens); } function makerWithdrawERC20Token( address tokenAddress, uint256 tokens ) onlyOwner returns (bool ok) { MakerWithdrewERC20Token(tokenAddress, tokens); return ERC20(tokenAddress).transfer(owner, tokens); } function makerWithdrawEther(uint256 ethers) onlyOwner returns (bool ok) { if (this.balance >= ethers) { MakerWithdrewEther(ethers); return owner.send(ethers); } } function makerTransferEther( TokenTrader toTokenTrader, uint256 ethers ) onlyOwner returns (bool ok) { if (owner != toTokenTrader.owner() || asset != toTokenTrader.asset()) { throw; } if (this.balance >= ethers) { MakerTransferredEther(toTokenTrader, ethers); toTokenTrader.makerDepositEther.value(ethers)(); } } function takerBuyAsset() payable { if (sellsTokens || msg.sender == owner) { uint order = msg.value / sellPrice; uint can_sell = ERC20(asset).balanceOf(address(this)) / units; uint256 change = 0; if (order > can_sell) { change = msg.value - (can_sell * sellPrice); order = can_sell; if (!msg.sender.send(change)) throw; } if (order > 0) { if(!ERC20(asset).transfer(msg.sender, order * units)) throw; } TakerBoughtAsset(msg.sender, msg.value, change, order * units); } else if (!msg.sender.send(msg.value)) throw; } function takerSellAsset(uint256 etherValueOfTokensToSell) { if (buysTokens || msg.sender == owner) { uint256 can_buy = this.balance / buyPrice; uint256 order = etherValueOfTokensToSell / units; if (order > can_buy) order = can_buy; if (order > 0) { if(!ERC20(asset).transferFrom(msg.sender, address(this), order * units)) throw; if(!msg.sender.send(order * buyPrice)) throw; } TakerSoldAsset(msg.sender, etherValueOfTokensToSell, order * units, order * buyPrice); } } function () payable { takerBuyAsset(); }}contract TokenTraderFactory is Owned { event TradeListing(address indexed ownerAddress, address indexed tokenTraderAddress, address indexed asset, uint256 buyPrice, uint256 sellPrice, uint256 units, bool buysTokens, bool sellsTokens); event OwnerWithdrewERC20Token(address indexed tokenAddress, uint256 tokens); mapping(address => bool) _verify; function verify(address tradeContract) constant returns ( bool valid, address owner, address asset, uint256 buyPrice, uint256 sellPrice, uint256 units, bool buysTokens, bool sellsTokens ) { valid = _verify[tradeContract]; if (valid) { TokenTrader t = TokenTrader(tradeContract); owner = t.owner(); asset = t.asset(); buyPrice = t.buyPrice(); sellPrice = t.sellPrice(); units = t.units(); buysTokens = t.buysTokens(); sellsTokens = t.sellsTokens(); } } function createTradeContract( address asset, uint256 buyPrice, uint256 sellPrice, uint256 units, bool buysTokens, bool sellsTokens ) returns (address trader) { if (asset == 0x0) throw; if (buyPrice <= 0 || sellPrice <= 0) throw; if (buyPrice >= sellPrice) throw; if (units <= 0) throw; trader = new TokenTrader( asset, buyPrice, sellPrice, units, buysTokens, sellsTokens); _verify[trader] = true; TokenTrader(trader).transferOwnership(msg.sender); TradeListing(msg.sender, trader, asset, buyPrice, sellPrice, units, buysTokens, sellsTokens); } function ownerWithdrawERC20Token(address tokenAddress, uint256 tokens) onlyOwner returns (bool ok) { OwnerWithdrewERC20Token(tokenAddress, tokens); return ERC20(tokenAddress).transfer(owner, tokens); } function () { throw; }}"
var traderCompiled = web3.eth.compile.solidity(traderSource);
eth.accounts
web3.sha3('getTitla()')
web3.sha3('getTitla()').substring(0,10)
web3.sha3('getTitle()').substring(0,10)
eth.accounts
eth.getTransactionReceipt("0x57812f9dc7d48bf69be2be858d88429ce24a014ee3a13a27f62822cc977eb8fe")
eth.gasLimit
eth.getBlock("latest")
Iota:TokenTraderFactory bok$ more genesis.json
{
  "config": {
    "homesteadBlock": 1
  },
  "nonce": "0",
  "difficulty": "0x400",
  "mixhash": "0x00000000000000000000000000000000000000647572616c65787365646c6578",
  "coinbase": "0x0000000000000000000000000000000000000000",
  "timestamp": "0x00",
  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "extraData": "0x",
  "gasLimit": "0x3B4A1B44",
  "alloc": {
    "0x000d1009bd8f0b1301cc5edc28ed1222a3ce671e": {
      "balance": "100000000000000000000000"
    },
    "0x0014060ff383c9b21c6840a3b14aab06741e5c49": {
      "balance": "100000000000000000000000"
    },
    "0x0020017ba4c67f76c76b1af8c41821ee54f37171": {
      "balance": "100000000000000000000000"
    },
    "0x0036f6addb6d64684390f55a92f0f4988266901b": {
      "balance": "100000000000000000000000"
    },
    "0x004e64833635cd1056b948b57286b7c91e62731c": {
      "balance": "100000000000000000000000"
    }
  }
}
web3.toWei(15, "ether")